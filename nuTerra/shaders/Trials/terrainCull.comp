#version 450 core

#extension GL_ARB_bindless_texture : require
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_compute_variable_group_size : require

#define USE_GLOBAL_UBO
#define USE_PERVIEW_UBO
#define USE_TERRAIN_CHUNK_INFO_SSBO
#define USE_TERRAIN_INDIRECT_SSBO
#include "common.h" //! #include "../common.h"

layout (local_size_variable) in;

struct Frustum {
    vec4 planes[6];
};

void loadFrustum(out Frustum f, mat4 mvp)
{
    for (int i = 0; i < 3; ++i)
    for (int j = 0; j < 2; ++j) {
        f.planes[i*2+j].x = mvp[0][3] + (j == 0 ? mvp[0][i] : -mvp[0][i]);
        f.planes[i*2+j].y = mvp[1][3] + (j == 0 ? mvp[1][i] : -mvp[1][i]);
        f.planes[i*2+j].z = mvp[2][3] + (j == 0 ? mvp[2][i] : -mvp[2][i]);
        f.planes[i*2+j].w = mvp[3][3] + (j == 0 ? mvp[3][i] : -mvp[3][i]);
        f.planes[i*2+j]*= length(f.planes[i*2+j].xyz);
    }
}

vec3 negativeVertex(vec3 bmin, vec3 bmax, vec3 n)
{
    bvec3 b = greaterThan(n, vec3(0));
    return mix(bmin, bmax, b);
}

bool frustumCullingTest(mat4 mvp, vec3 bmin, vec3 bmax)
{
    float a = 1.0f;
    Frustum f;

    loadFrustum(f, mvp);
    for (int i = 0; i < 6 && a >= 0.0f; ++i) {
        vec3 n = negativeVertex(bmin, bmax, f.planes[i].xyz);

        a = dot(vec4(n, 1.0f), f.planes[i]);
    }

    return (a >= 0.0);
}

void main(void)
{
    if (gl_GlobalInvocationID.x >= numTerrainChunks) return;

    const TerrainChunkInfo info = terrain_chunk_info[gl_GlobalInvocationID.x];
    const mat4 mvp = viewProj * info.modelMatrix;

    vec3 bmin = vec3(-50);
    vec3 bmax = vec3(50);

    const bool passed = frustumCullingTest(mvp, bmin, bmax);
    terrain_indirect[gl_GlobalInvocationID.x].instanceCount = passed ? 1 : 0;

    if (!passed) return;

    float l1 = abs(info.me_location.x - cameraPos.x);
    float l2 = abs(info.avg_heights - cameraPos.y);
    float l3 = abs(info.me_location.y - cameraPos.z);

    terrain_chunk_info[gl_GlobalInvocationID.x].lq = length(vec3(l1, l2, l3)) > 300.0 ? 1 : 0;
}
