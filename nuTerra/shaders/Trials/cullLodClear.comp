#version 450 core

#ifdef GL_SPIRV
#extension GL_GOOGLE_include_directive : require
#else
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_bindless_texture : require
#endif

#define USE_PERVIEW_UBO
#define USE_MODELINSTANCES_SSBO
#define USE_CANDIDATE_DRAWS_SSBO
#define USE_MATERIALS_SSBO
#define USE_LODS_SSBO
#define USE_INDIRECT_SSBO
#define USE_INDIRECT_GLASS_SSBO
#define USE_INDIRECT_DOUBLE_SIDED_SSBO
#include "common.h" //! #include "../common.h"

layout (local_size_x = 16) in;

layout (location = 0) uniform int numModelInstances;

layout (binding = PARAMETERS_BASE, offset = 0) uniform atomic_uint commandCounter;
layout (binding = PARAMETERS_BASE, offset = 4) uniform atomic_uint commandDoubleSidedCounter;
layout (binding = PARAMETERS_BASE, offset = 8) uniform atomic_uint commandGlassCounter;


void main(void)
{
    if (gl_GlobalInvocationID.x >= numModelInstances) return;

    const ModelInstance thisModel = models[gl_GlobalInvocationID.x];


        const ModelLoD lod = lods[thisModel.lod_offset];

        for (int i = 0; i < 1; ++i) {
            const CandidateDraw thisDraw = draw[lod.draw_offset + 0];

            if (material[thisDraw.material_id].double_sided) {
                uint outDrawIndex = atomicCounterIncrement(commandDoubleSidedCounter);
                command_double_sided[outDrawIndex].count = thisDraw.count;
                command_double_sided[outDrawIndex].instanceCount = 1;
                command_double_sided[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command_double_sided[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command_double_sided[outDrawIndex].baseInstance = thisDraw.baseInstance;
            }else if (material[thisDraw.material_id].shader_type == 6) {
                uint outDrawIndex = atomicCounterIncrement(commandGlassCounter);
                command_glass[outDrawIndex].count = thisDraw.count;
                command_glass[outDrawIndex].instanceCount = 1;
                command_glass[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command_glass[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command_glass[outDrawIndex].baseInstance = thisDraw.baseInstance;
            } else {
                uint outDrawIndex = atomicCounterIncrement(commandCounter);
                command[outDrawIndex].count = thisDraw.count;
                command[outDrawIndex].instanceCount = 1;
                command[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command[outDrawIndex].baseInstance = thisDraw.baseInstance;
            }
           
        }
}
