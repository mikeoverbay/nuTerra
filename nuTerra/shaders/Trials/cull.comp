#version 450 core

layout (local_size_x = 16) in;

struct CandidateDraw
{
    vec3 bmin;
    uint model_id;
    vec3 bmax;
    uint material_id;
    uint count;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

struct DrawElementsIndirectCommand
{
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout (binding = 0, std430) readonly buffer CandidateDraws
{
    CandidateDraw draw[];
};

layout (binding = 1, std430) writeonly buffer OutputDraws
{
    DrawElementsIndirectCommand command[];
};

layout(binding = 2, std140) readonly buffer MODEL_MATRIX_BLOCK
{
    mat4 model_matrix[];
};

layout (binding = 0, offset = 0) uniform atomic_uint commandCounter;

uniform mat4 projection;
uniform mat4 view;

struct Frustum {
	vec4 planes[6];
};

void loadFrustum(out Frustum f, mat4 mvp)
{
	for (int i = 0; i < 3; ++i)
	for (int j = 0; j < 2; ++j) {
		f.planes[i*2+j].x = mvp[0][3] + (j == 0 ? mvp[0][i] : -mvp[0][i]);
		f.planes[i*2+j].y = mvp[1][3] + (j == 0 ? mvp[1][i] : -mvp[1][i]);
		f.planes[i*2+j].z = mvp[2][3] + (j == 0 ? mvp[2][i] : -mvp[2][i]);
		f.planes[i*2+j].w = mvp[3][3] + (j == 0 ? mvp[3][i] : -mvp[3][i]);
		f.planes[i*2+j]*= length(f.planes[i*2+j].xyz);
	}
}

vec3 negativeVertex(vec3 bmin, vec3 bmax, vec3 n)
{
	bvec3 b = greaterThan(n, vec3(0));
	return mix(bmin, bmax, b);
}

bool frustumCullingTest(mat4 mvp, vec3 bmin, vec3 bmax)
{
	float a = 1.0f;
	Frustum f;

	loadFrustum(f, mvp);
	for (int i = 0; i < 6 && a >= 0.0f; ++i) {
		vec3 n = negativeVertex(bmin, bmax, f.planes[i].xyz);

		a = dot(vec4(n, 1.0f), f.planes[i]);
	}

	return (a >= 0.0);
}

void main(void)
{
    const CandidateDraw thisDraw = draw[gl_GlobalInvocationID.x];
    const mat4 thisModelMatrix = model_matrix[thisDraw.model_id];
    const mat4 MVP = projection * view * thisModelMatrix;

    if (frustumCullingTest(MVP, vec3(thisDraw.bmax.x, thisDraw.bmin.yz), vec3(thisDraw.bmin.x, thisDraw.bmax.yz))) {
        uint outDrawIndex = atomicCounterIncrement(commandCounter);
        command[outDrawIndex].count = thisDraw.count;
        command[outDrawIndex].instanceCount = 1;
        command[outDrawIndex].firstIndex = thisDraw.firstIndex;
        command[outDrawIndex].baseVertex = thisDraw.baseVertex;
        command[outDrawIndex].baseInstance = thisDraw.baseInstance;
    }
}
