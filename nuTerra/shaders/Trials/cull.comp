#version 450 core

#extension GL_ARB_shading_language_include : require
#extension GL_ARB_bindless_texture : require
#extension GL_ARB_compute_variable_group_size : require
#extension GL_ARB_shader_atomic_counter_ops : require

#define USE_PERVIEW_UBO
#define USE_MODELINSTANCES_SSBO
#define USE_CANDIDATE_DRAWS_SSBO
#define USE_MATERIALS_SSBO
#define USE_LODS_SSBO
#define USE_INDIRECT_SSBO
#define USE_INDIRECT_GLASS_SSBO
#define USE_INDIRECT_DOUBLE_SIDED_SSBO
#ifdef SHADOW_MAPPING
#define INDIRECT_SHADOW_MAPPING_SSBO
#endif
#include "common.h" //! #include "../common.h"

layout (local_size_variable) in;

layout (location = 0) uniform int numModelInstances;

layout (binding = PARAMETERS_BASE, offset = 0) uniform atomic_uint commandCounter;
layout (binding = PARAMETERS_BASE, offset = 4) uniform atomic_uint commandDoubleSidedCounter;
layout (binding = PARAMETERS_BASE, offset = 8) uniform atomic_uint commandGlassCounter;
#ifdef SHADOW_MAPPING
layout (binding = PARAMETERS_BASE, offset = 12) uniform atomic_uint commandShadowMappingCounter;
#endif

struct Frustum {
    vec4 planes[6];
};

void loadFrustum(out Frustum f, mat4 mvp)
{
    for (int i = 0; i < 3; ++i)
    for (int j = 0; j < 2; ++j) {
        f.planes[i*2+j].x = mvp[0][3] + (j == 0 ? mvp[0][i] : -mvp[0][i]);
        f.planes[i*2+j].y = mvp[1][3] + (j == 0 ? mvp[1][i] : -mvp[1][i]);
        f.planes[i*2+j].z = mvp[2][3] + (j == 0 ? mvp[2][i] : -mvp[2][i]);
        f.planes[i*2+j].w = mvp[3][3] + (j == 0 ? mvp[3][i] : -mvp[3][i]);
        f.planes[i*2+j]*= length(f.planes[i*2+j].xyz);
    }
}

vec3 negativeVertex(vec3 bmin, vec3 bmax, vec3 n)
{
    bvec3 b = greaterThan(n, vec3(0));
    return mix(bmin, bmax, b);
}

bool frustumCullingTest(mat4 mvp, vec3 bmin, vec3 bmax)
{
    float a = 1.0f;
    Frustum f;

    loadFrustum(f, mvp);
    for (int i = 0; i < 6 && a >= 0.0f; ++i) {
        vec3 n = negativeVertex(bmin, bmax, f.planes[i].xyz);

        a = dot(vec4(n, 1.0f), f.planes[i]);
    }

    return (a >= 0.0);
}

void main(void)
{
    if (gl_GlobalInvocationID.x >= numModelInstances) return;

    const ModelInstance thisModel = models[gl_GlobalInvocationID.x];
    const mat4 MVP = viewProj * thisModel.matrix;

#ifdef SHADOW_MAPPING
    {
        // use lod0 for shadow mapping
        const ModelLoD lod = lods[thisModel.lod_offset];
        for (int i = 0; i < lod.draw_count; ++i) {
            const CandidateDraw thisDraw = draw[lod.draw_offset + i];
            uint outDrawIndex = atomicCounterIncrement(commandShadowMappingCounter);
            command_shadow_mapping[outDrawIndex].count = thisDraw.count;
            command_shadow_mapping[outDrawIndex].instanceCount = 1;
            command_shadow_mapping[outDrawIndex].firstIndex = thisDraw.firstIndex;
            command_shadow_mapping[outDrawIndex].baseVertex = thisDraw.baseVertex;
            command_shadow_mapping[outDrawIndex].baseInstance = thisDraw.baseInstance;
        }
    }
#endif

    if (frustumCullingTest(MVP, thisModel.bmin, thisModel.bmax)) {
        const vec4 cs_position = view * thisModel.matrix * vec4(0, 0, 0, 1);
        const float radius = length(thisModel.bmax - thisModel.bmin) / 2.0f;
        const float distToCamera = -cs_position.z - radius;

        // Save mvp
        models[gl_GlobalInvocationID.x].cached_mvp = MVP;

        const uint lod_id = min(
            distToCamera < 50 ? 0 :
            distToCamera < 100 ? 1 :
            distToCamera < 150 ? 2 : 3, thisModel.lod_count - 1);
        const ModelLoD lod = lods[thisModel.lod_offset + thisModel.batch_count * lod_id];

        for (int i = 0; i < lod.draw_count; ++i) {
            const CandidateDraw thisDraw = draw[lod.draw_offset + i];

            if (material[thisDraw.material_id].double_sided) {
                uint outDrawIndex = atomicCounterIncrement(commandDoubleSidedCounter);
                command_double_sided[outDrawIndex].count = thisDraw.count;
                command_double_sided[outDrawIndex].instanceCount = 1;
                command_double_sided[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command_double_sided[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command_double_sided[outDrawIndex].baseInstance = thisDraw.baseInstance;
            }else if (material[thisDraw.material_id].shader_type == 6) {
                uint outDrawIndex = atomicCounterIncrement(commandGlassCounter);
                command_glass[outDrawIndex].count = thisDraw.count;
                command_glass[outDrawIndex].instanceCount = 1;
                command_glass[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command_glass[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command_glass[outDrawIndex].baseInstance = thisDraw.baseInstance;
            } else {
                uint outDrawIndex = atomicCounterIncrement(commandCounter);
                command[outDrawIndex].count = thisDraw.count;
                command[outDrawIndex].instanceCount = 1;
                command[outDrawIndex].firstIndex = thisDraw.firstIndex;
                command[outDrawIndex].baseVertex = thisDraw.baseVertex;
                command[outDrawIndex].baseInstance = thisDraw.baseInstance;
            }
           
        }
    }
}
